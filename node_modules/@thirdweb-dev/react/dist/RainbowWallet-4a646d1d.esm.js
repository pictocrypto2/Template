import { WalletConnect } from '@thirdweb-dev/wallets';
import { useCreateWalletInstance, useWalletContext, useConnect } from '@thirdweb-dev/react-core';
import { useState, useRef, useEffect } from 'react';
import { S as ScanScreen, i as isMobile, C as ConnectingScreen, G as GetStartedScreen } from './headlessConnectUI-33f7b972.esm.js';
import { jsx } from 'react/jsx-runtime';
import './basic-d06569f8.esm.js';
import '@emotion/react';
import '@emotion/styled';
import '@radix-ui/colors';
import 'detect-browser';
import 'react-qr-code';
import '@radix-ui/react-dialog';
import '@radix-ui/react-icons';

const RainbowScan = _ref => {
  let {
    onBack,
    onConnected,
    onGetStarted,
    walletConfig
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = useState();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = useWalletContext();
  const scanStarted = useRef(false);
  useEffect(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    const rainbow = createInstance(walletConfig);
    setConnectionStatus("connecting");
    rainbow.connectWithQrCode({
      chainId: chainToConnect?.chainId,
      onQrCodeUri(uri) {
        setQrCodeUri(uri);
      },
      onConnected() {
        setConnectedWallet(rainbow);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus]);
  return /*#__PURE__*/jsx(ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL
  });
};

const RainbowConnectUI = props => {
  const [screen, setScreen] = useState("connecting");
  const {
    walletConfig,
    close
  } = props;
  const connect = useConnect();
  const {
    goBack
  } = props;
  const connectPrompted = useRef(false);
  useEffect(() => {
    if (connectPrompted.current) {
      return;
    }

    // if loading
    (async () => {
      // on mobile, open rainbow app link
      if (isMobile()) {
        window.open("https://rnbwapp.com");
      } else {
        // on desktop, show the rainbow scan qr code
        setScreen("scanning");
      }
    })();
  }, [walletConfig, close, connect, goBack]);
  if (screen === "connecting") {
    return /*#__PURE__*/jsx(ConnectingScreen, {
      onBack: props.goBack,
      walletName: walletConfig.meta.name,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink: "https://rainbow.me/"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsx(GetStartedScreen, {
      walletIconURL: walletConfig.meta.iconURL,
      walletName: walletConfig.meta.name,
      chromeExtensionLink: walletConfig.meta.urls?.chrome,
      googlePlayStoreLink: walletConfig.meta.urls?.android,
      appleStoreLink: walletConfig.meta.urls?.ios,
      onBack: props.goBack
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsx(RainbowScan, {
      onBack: props.goBack,
      onConnected: close,
      onGetStarted: () => {
        setScreen("get-started");
      },
      walletConfig: walletConfig
    });
  }
  return null;
};

const rainbowWallet = options => {
  return {
    id: "rainbow",
    meta: {
      name: "Rainbow Wallet",
      iconURL: "ipfs://QmSZn47p4DVVBfzvg9BAX2EqwnPxkT1YAE7rUnrtd9CybQ/rainbow-logo.png"
    },
    create: walletOptions => {
      return new WalletConnect({
        ...walletOptions,
        walletId: "rainbow",
        projectId: options?.projectId,
        qrcode: false
      });
    },
    connectUI: RainbowConnectUI,
    isInstalled() {
      return false;
    }
  };
};

export { rainbowWallet };
